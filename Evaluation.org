#+TITLE: MÃ©thodes d'ensemble
#+PROPERTY: header-args:jupyter-python :session *Py* :results raw drawer :cache no :exports results :eval yes

#+SUBTITLE:Segmenter des clients d'un site e-commerce
#+AUTHOR: Laurent Siksous
#+EMAIL: siksous@gmail.com
# #+DATE: 
#+DESCRIPTION: 
#+KEYWORDS: 
#+LANGUAGE:  fr

# specifying the beamer startup gives access to a number of
# keybindings which make configuring individual slides and components
# of slides easier.  See, for instance, C-c C-b on a frame headline.
#+STARTUP: beamer

#+STARTUP: oddeven

# we tell the exporter to use a specific LaTeX document class, as
# defined in org-latex-classes.  By default, this does not include a
# beamer entry so this needs to be defined in your configuration (see
# the tutorial).
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger] 

#+LATEX_HEADER: \usepackage{listings}

#+LATEX_HEADER: \definecolor{UBCblue}{rgb}{0.04706, 0.13725, 0.26667} % UBC Blue (primary)
#+LATEX_HEADER: \usecolortheme[named=UBCblue]{structure}

# Beamer supports alternate themes.  Choose your favourite here
#+BEAMER_COLOR_THEME: dolphin
#+BEAMER_FONT_THEME:  default
#+BEAMER_INNER_THEME: [shadow]rounded
#+BEAMER_OUTER_THEME: infolines

# the beamer exporter expects to be told which level of headlines
# defines the frames.  We use the first level headlines for sections
# and the second (hence H:2) for frames.
#+OPTIONS:   H:2 toc:t

# the following allow us to selectively choose headlines to export or not
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

# for a column view of options and configurations for the individual
# frames
#+COLUMNS: %20ITEM %13BEAMER_env(Env) %6BEAMER_envargs(Args) %4BEAMER_col(Col) %7BEAMER_extra(Extra)

# #+BEAMER_HEADER: \usebackgroundtemplate{\includegraphics[width=\paperwidth,height=\paperheight,opacity=.01]{img/bg2.jpeg}}
# #+BEAMER_HEADER: \logo{\includegraphics[height=.5cm,keepaspectratio]{img/bti_logo2.png}\vspace{240pt}}
# #+BEAMER_HEADER: \setbeamertemplate{background canvas}{\begin{tikzpicture}\node[opacity=.1]{\includegraphics [width=\paperwidth,height=\paperheight]{img/background.jpg}};\end{tikzpicture}}
# #+BEAMER_HEADER: \logo{\includegraphics[width=\paperwidth,height=\paperheight,keepaspectratio]{img/background.jpg}}
#+BEAMER_HEADER: \titlegraphic{\includegraphics[width=50]{img/logo.png}}
# #+BEAMER_HEADER: \definecolor{ft}{RGB}{255, 241, 229}
#+BEAMER_HEADER: \setbeamercolor{background canvas}{bg=ft}

* Preamble
** Emacs Setup                                                    :noexport:

#+begin_src emacs-lisp
(setq org-src-fontify-natively t)

(setq lsp-semantic-tokens-enable t)
(setq lsp-enable-symbol-highlighting t)

(setq lsp-enable-file-watchers nil
      read-process-output-max (* 1024 1024)
      gc-cons-threshold 100000000
      lsp-idle-delay 0.5
      ;;
      lsp-eldoc-hook nil
      lsp-eldoc-enable-hover nil

      ;;pas de fil d'ariane
      lsp-headerline-breadcrumb-enable nil
      ;; pas de imenu voir menu-list
      lsp-enable-imenu nil
      ;; lentille
      lsp-lens-enable t
 
      lsp-semantic-highlighting t
      lsp-modeline-code-actions-enable t
      )
  
(setq lsp-completion-provider :company
      lsp-completion-show-detail t
      lsp-completion-show-kind t)

(setq lsp-ui-doc-enable t
      lsp-ui-doc-show-with-mouse nil
      lsp-ui-doc-show-with-cursor t
      lsp-ui-doc-use-childframe t
      
      lsp-ui-sideline-diagnostic-max-line-length 80

      ;; lsp-ui-imenu
      lsp-ui-imenu-enable nil
      ;; lsp-ui-peek
      lsp-ui-peek-enable t
      ;; lsp-ui-sideline
      lsp-ui-sideline-enable t
      lsp-ui-sideline-ignore-duplicate t
      lsp-ui-sideline-show-symbol t
      lsp-ui-sideline-show-hover t
      lsp-ui-sideline-show-diagnostics t
      lsp-ui-sideline-show-code-actions t
      )

(setq lsp-diagnostics-provider :none
      lsp-modeline-diagnostics-enable nil
      lsp-signature-auto-activate nil ;; you could manually request them via `lsp-signature-activate`
      lsp-signature-render-documentation nil)
#+end_src

** Imports

#+begin_src jupyter-python
%matplotlib inline

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score, mean_absolute_error, mean_squared_error, mean_squared_log_error
#+end_src

#+RESULTS:
: # Out[25]:


** Functions

#+begin_src jupyter-python
# Display all
def display_all(df):
    with pd.option_context("display.max_rows", 100, "display.max_columns", 100): 
        display(df)
#+end_src

** Org                                                            :noexport:

#+begin_src jupyter-python
# Org-mode table formatter
import IPython
import tabulate

class OrgFormatter(IPython.core.formatters.BaseFormatter):
    format_type = IPython.core.formatters.Unicode('text/org')
    print_method = IPython.core.formatters.ObjectName('_repr_org_')

def pd_dataframe_to_org(df):
    return tabulate.tabulate(df, headers='keys', tablefmt='orgtbl', showindex='always')

ip = get_ipython()
ip.display_formatter.formatters['text/org'] = OrgFormatter()

f = ip.display_formatter.formatters['text/org']
f.for_type_by_name('pandas.core.frame', 'DataFrame', pd_dataframe_to_org)
#+end_src

* Evaluation
** Load Data

#+begin_src jupyter-python
df = pd.read_csv('data/test.csv')

display_all(df.describe(include='all').T)
#+end_src

#+RESULTS:
#+begin_example
# Out[26]:
,#+BEGIN_EXAMPLE
  count        mean        std        min        25%        50%  \
  MedInc      4128.0    0.655962   0.322218   0.085610   0.436442   0.599390
  HouseAge    4128.0   13.129791   5.714123   0.456461   8.216306  13.237382
  AveRooms    4128.0    0.101505   0.052494   0.015893   0.082583   0.097536
  AveBedrms   4128.0    0.014409   0.008018   0.006570   0.013196   0.013753
  Population  4128.0  109.989661  86.194053   0.618975  60.427430  89.751369
  AveOccup    4128.0    0.428787   0.253521   0.182706   0.352142   0.408277
  Latitude    4128.0   12.329565   0.738927  11.273985  11.755572  11.859512
  Longitude   4128.0  -47.919482   0.799653 -49.792105 -48.789768 -47.498757
  AvePrice    4128.0    2.055003   1.144870   0.149990   1.192750   1.786500
  
  75%          max
  MedInc        0.795635     2.568832
  HouseAge     16.889074    23.735995
  AveRooms      0.112866     2.489393
  AveBedrms     0.014399     0.447611
  Population  133.234360  1247.389284
  AveOccup      0.475628    12.026200
  Latitude     13.061747    14.485720
  Longitude   -47.306308   -45.939120
  AvePrice      2.630000     5.000010
,#+END_EXAMPLE
#+end_example

** Load model

#+begin_src jupyter-python
rf = pickle.load(open('data/RF_california.pkl', 'rb'))
#+end_src

#+RESULTS:
: # Out[27]:

* Evaluation

#+begin_src jupyter-python
X = test.drop('AvePrice', axis=1).to_numpy()
y = test['AvePrice'].to_numpy()

rf.fit(X, y)
#+end_src

#+RESULTS:
: # Out[28]:
: #+BEGIN_EXAMPLE
:   RandomForestRegressor(max_depth=8, max_features='log2', n_estimators=800,
:   oob_score=True, warm_start=True)
: #+END_EXAMPLE

#+begin_src jupyter-python
rf.score(X, y)
#+end_src

#+RESULTS:
: # Out[29]:
: : 0.8329383120470628

#+begin_src jupyter-python
y_pred = rf.predict(X)
print('Mean Absolute Error:', mean_absolute_error(y, y_pred))  
print('Mean Squared Error:', mean_squared_error(y, y_pred))
print('Mean Squared Log Error:', mean_squared_log_error(y, y_pred))
print('Root Mean Squared Error:', np.sqrt(mean_squared_error(y, y_pred)))
#+end_src

#+RESULTS:
: # Out[30]:

Soit une erreur de 46.000 dollars en moyenne.

* Bibliography
** References
:PROPERTIES:
:BEAMER_opt: shrink=10
:END:

bibliographystyle:unsrt
bibliography:california.bib

* Local Variables                                                  :noexport:
# Local Variables:
# eval: (setenv "PATH" "/Library/TeX/texbin/:$PATH" t)
# org-ref-default-bibliography: ("./olist.bib")
  # End:

#+TITLE: Méthodes d'ensemble
#+PROPERTY: header-args:jupyter-python :session *Py* :results raw drawer :cache no :exports results :eval yes

#+SUBTITLE:Segmenter des clients d'un site e-commerce
#+AUTHOR: Laurent Siksous
#+EMAIL: siksous@gmail.com
# #+DATE: 
#+DESCRIPTION: 
#+KEYWORDS: 
#+LANGUAGE:  fr

# specifying the beamer startup gives access to a number of
# keybindings which make configuring individual slides and components
# of slides easier.  See, for instance, C-c C-b on a frame headline.
#+STARTUP: beamer

#+STARTUP: oddeven

# we tell the exporter to use a specific LaTeX document class, as
# defined in org-latex-classes.  By default, this does not include a
# beamer entry so this needs to be defined in your configuration (see
# the tutorial).
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger] 

#+LATEX_HEADER: \usepackage{listings}

#+LATEX_HEADER: \definecolor{UBCblue}{rgb}{0.04706, 0.13725, 0.26667} % UBC Blue (primary)
#+LATEX_HEADER: \usecolortheme[named=UBCblue]{structure}

# Beamer supports alternate themes.  Choose your favourite here
#+BEAMER_COLOR_THEME: dolphin
#+BEAMER_FONT_THEME:  default
#+BEAMER_INNER_THEME: [shadow]rounded
#+BEAMER_OUTER_THEME: infolines

# the beamer exporter expects to be told which level of headlines
# defines the frames.  We use the first level headlines for sections
# and the second (hence H:2) for frames.
#+OPTIONS:   H:2 toc:t

# the following allow us to selectively choose headlines to export or not
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

# for a column view of options and configurations for the individual
# frames
#+COLUMNS: %20ITEM %13BEAMER_env(Env) %6BEAMER_envargs(Args) %4BEAMER_col(Col) %7BEAMER_extra(Extra)

# #+BEAMER_HEADER: \usebackgroundtemplate{\includegraphics[width=\paperwidth,height=\paperheight,opacity=.01]{img/bg2.jpeg}}
# #+BEAMER_HEADER: \logo{\includegraphics[height=.5cm,keepaspectratio]{img/bti_logo2.png}\vspace{240pt}}
# #+BEAMER_HEADER: \setbeamertemplate{background canvas}{\begin{tikzpicture}\node[opacity=.1]{\includegraphics [width=\paperwidth,height=\paperheight]{img/background.jpg}};\end{tikzpicture}}
# #+BEAMER_HEADER: \logo{\includegraphics[width=\paperwidth,height=\paperheight,keepaspectratio]{img/background.jpg}}
#+BEAMER_HEADER: \titlegraphic{\includegraphics[width=50]{img/logo.png}}
# #+BEAMER_HEADER: \definecolor{ft}{RGB}{255, 241, 229}
#+BEAMER_HEADER: \setbeamercolor{background canvas}{bg=ft}

* Preamble
** Emacs Setup                                                    :noexport:

#+begin_src emacs-lisp
(setq org-src-fontify-natively t)

(setq lsp-semantic-tokens-enable t)
(setq lsp-enable-symbol-highlighting t)

(setq lsp-enable-file-watchers nil
      read-process-output-max (* 1024 1024)
      gc-cons-threshold 100000000
      lsp-idle-delay 0.5
      ;;
      lsp-eldoc-hook nil
      lsp-eldoc-enable-hover nil

      ;;pas de fil d'ariane
      lsp-headerline-breadcrumb-enable nil
      ;; pas de imenu voir menu-list
      lsp-enable-imenu nil
      ;; lentille
      lsp-lens-enable t
 
      lsp-semantic-highlighting t
      lsp-modeline-code-actions-enable t
      )
  
(setq lsp-completion-provider :company
      lsp-completion-show-detail t
      lsp-completion-show-kind t)

(setq lsp-ui-doc-enable t
      lsp-ui-doc-show-with-mouse nil
      lsp-ui-doc-show-with-cursor t
      lsp-ui-doc-use-childframe t
      
      lsp-ui-sideline-diagnostic-max-line-length 80

      ;; lsp-ui-imenu
      lsp-ui-imenu-enable nil
      ;; lsp-ui-peek
      lsp-ui-peek-enable t
      ;; lsp-ui-sideline
      lsp-ui-sideline-enable t
      lsp-ui-sideline-ignore-duplicate t
      lsp-ui-sideline-show-symbol t
      lsp-ui-sideline-show-hover t
      lsp-ui-sideline-show-diagnostics t
      lsp-ui-sideline-show-code-actions t
      )

(setq lsp-diagnostics-provider :none
      lsp-modeline-diagnostics-enable nil
      lsp-signature-auto-activate nil ;; you could manually request them via `lsp-signature-activate`
      lsp-signature-render-documentation nil)
#+end_src

** Imports

#+begin_src jupyter-python
%matplotlib inline

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
#+end_src

** Functions

#+begin_src jupyter-python
# Display all
def display_all(df):
    with pd.option_context("display.max_rows", 100, "display.max_columns", 100): 
        display(df)
#+end_src

** Org                                                            :noexport:

#+begin_src jupyter-python
# Org-mode table formatter
import IPython
import tabulate

class OrgFormatter(IPython.core.formatters.BaseFormatter):
    format_type = IPython.core.formatters.Unicode('text/org')
    print_method = IPython.core.formatters.ObjectName('_repr_org_')

def pd_dataframe_to_org(df):
    return tabulate.tabulate(df, headers='keys', tablefmt='orgtbl', showindex='always')

ip = get_ipython()
ip.display_formatter.formatters['text/org'] = OrgFormatter()

f = ip.display_formatter.formatters['text/org']
f.for_type_by_name('pandas.core.frame', 'DataFrame', pd_dataframe_to_org)
#+end_src

* Data Wrangling
** Load Data

#+begin_src jupyter-python
raw = fetch_california_housing(as_frame=True)

df_raw = pd.DataFrame(data = np.c_[raw['data'], raw['target']],
                  columns = raw['feature_names'] + ['AvePrice'])

display_all(df_raw.describe(include='all').T)
#+end_src

** Desciption des données

- Affichons la description des données :

#+begin_src jupyter-python :results output
print(raw.DESCR)
#+end_src

#+begin_src jupyter-python
df_raw.hist(bins=50, figsize=(15,15))
plt.show()
#+end_src

#+begin_src jupyter-python
plt.figure(figsize=(8, 7))
sns.scatterplot(data=df_raw, x="Longitude", y="Latitude",
                size="AvePrice", hue="AvePrice",
                palette="viridis", alpha=0.5)
plt.legend(title="AvePrice", bbox_to_anchor=(1.05, 0.95),
           loc="upper left")
plt.title("Prix moyen des biens par rapport à leur géolocalisation (100k_USD)")
plt.show()
#+end_src


** Split the Data

#+begin_src jupyter-python
train, test = train_test_split(df_raw, test_size=0.2, random_state=42, shuffle=True)
#+end_src


#+begin_src jupyter-python
# save the train and test file
train.to_csv('data/train.csv', index=False)
test.to_csv('data/test.csv', index=False)
#+end_src

* Bibliography
** References
:PROPERTIES:
:BEAMER_opt: shrink=10
:END:

bibliographystyle:unsrt
bibliography:california.bib

* Local Variables                                                  :noexport:
# Local Variables:
# eval: (setenv "PATH" "/Library/TeX/texbin/:$PATH" t)
# org-ref-default-bibliography: ("./olist.bib")
# End:

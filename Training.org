#+TITLE: MÃ©thodes d'ensemble
#+PROPERTY: header-args:jupyter-python :session *Py* :results raw drawer :cache no :exports results :eval yes

#+SUBTITLE:Segmenter des clients d'un site e-commerce
#+AUTHOR: Laurent Siksous
#+EMAIL: siksous@gmail.com
# #+DATE: 
#+DESCRIPTION: 
#+KEYWORDS: 
#+LANGUAGE:  fr

# specifying the beamer startup gives access to a number of
# keybindings which make configuring individual slides and components
# of slides easier.  See, for instance, C-c C-b on a frame headline.
#+STARTUP: beamer

#+STARTUP: oddeven

# we tell the exporter to use a specific LaTeX document class, as
# defined in org-latex-classes.  By default, this does not include a
# beamer entry so this needs to be defined in your configuration (see
# the tutorial).
#+LaTeX_CLASS: beamer
#+LaTeX_CLASS_OPTIONS: [bigger] 

#+LATEX_HEADER: \usepackage{listings}

#+LATEX_HEADER: \definecolor{UBCblue}{rgb}{0.04706, 0.13725, 0.26667} % UBC Blue (primary)
#+LATEX_HEADER: \usecolortheme[named=UBCblue]{structure}

# Beamer supports alternate themes.  Choose your favourite here
#+BEAMER_COLOR_THEME: dolphin
#+BEAMER_FONT_THEME:  default
#+BEAMER_INNER_THEME: [shadow]rounded
#+BEAMER_OUTER_THEME: infolines

# the beamer exporter expects to be told which level of headlines
# defines the frames.  We use the first level headlines for sections
# and the second (hence H:2) for frames.
#+OPTIONS:   H:2 toc:t

# the following allow us to selectively choose headlines to export or not
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport

# for a column view of options and configurations for the individual
# frames
#+COLUMNS: %20ITEM %13BEAMER_env(Env) %6BEAMER_envargs(Args) %4BEAMER_col(Col) %7BEAMER_extra(Extra)

# #+BEAMER_HEADER: \usebackgroundtemplate{\includegraphics[width=\paperwidth,height=\paperheight,opacity=.01]{img/bg2.jpeg}}
# #+BEAMER_HEADER: \logo{\includegraphics[height=.5cm,keepaspectratio]{img/bti_logo2.png}\vspace{240pt}}
# #+BEAMER_HEADER: \setbeamertemplate{background canvas}{\begin{tikzpicture}\node[opacity=.1]{\includegraphics [width=\paperwidth,height=\paperheight]{img/background.jpg}};\end{tikzpicture}}
# #+BEAMER_HEADER: \logo{\includegraphics[width=\paperwidth,height=\paperheight,keepaspectratio]{img/background.jpg}}
#+BEAMER_HEADER: \titlegraphic{\includegraphics[width=50]{img/logo.png}}
# #+BEAMER_HEADER: \definecolor{ft}{RGB}{255, 241, 229}
#+BEAMER_HEADER: \setbeamercolor{background canvas}{bg=ft}

* Preamble
** Emacs Setup                                                    :noexport:

#+begin_src emacs-lisp
(setq org-src-fontify-natively t)

(setq lsp-semantic-tokens-enable t)
(setq lsp-enable-symbol-highlighting t)

(setq lsp-enable-file-watchers nil
      read-process-output-max (* 1024 1024)
      gc-cons-threshold 100000000
      lsp-idle-delay 0.5
      ;;
      lsp-eldoc-hook nil
      lsp-eldoc-enable-hover nil

      ;;pas de fil d'ariane
      lsp-headerline-breadcrumb-enable nil
      ;; pas de imenu voir menu-list
      lsp-enable-imenu nil
      ;; lentille
      lsp-lens-enable t
 
      lsp-semantic-highlighting t
      lsp-modeline-code-actions-enable t
      )
  
(setq lsp-completion-provider :company
      lsp-completion-show-detail t
      lsp-completion-show-kind t)

(setq lsp-ui-doc-enable t
      lsp-ui-doc-show-with-mouse nil
      lsp-ui-doc-show-with-cursor t
      lsp-ui-doc-use-childframe t
      
      lsp-ui-sideline-diagnostic-max-line-length 80

      ;; lsp-ui-imenu
      lsp-ui-imenu-enable nil
      ;; lsp-ui-peek
      lsp-ui-peek-enable t
      ;; lsp-ui-sideline
      lsp-ui-sideline-enable t
      lsp-ui-sideline-ignore-duplicate t
      lsp-ui-sideline-show-symbol t
      lsp-ui-sideline-show-hover t
      lsp-ui-sideline-show-diagnostics t
      lsp-ui-sideline-show-code-actions t
      )

(setq lsp-diagnostics-provider :none
      lsp-modeline-diagnostics-enable nil
      lsp-signature-auto-activate nil ;; you could manually request them via `lsp-signature-activate`
      lsp-signature-render-documentation nil)
#+end_src

** Imports

#+begin_src jupyter-python
%matplotlib inline

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import r2_score, mean_squared_error, mean_squared_log_error

import pickle
#+end_src

#+RESULTS:
: # Out[1]:

: # Out[2]:

** Functions

#+begin_src jupyter-python
# Display all
def display_all(df):
    with pd.option_context("display.max_rows", 100, "display.max_columns", 100): 
        display(df)
#+end_src

#+RESULTS:
: # Out[2]:

** Org                                                            :noexport:

#+begin_src jupyter-python
# Org-mode table formatter
import IPython
import tabulate

class OrgFormatter(IPython.core.formatters.BaseFormatter):
    format_type = IPython.core.formatters.Unicode('text/org')
    print_method = IPython.core.formatters.ObjectName('_repr_org_')

def pd_dataframe_to_org(df):
    return tabulate.tabulate(df, headers='keys', tablefmt='orgtbl', showindex='always')

ip = get_ipython()
ip.display_formatter.formatters['text/org'] = OrgFormatter()

f = ip.display_formatter.formatters['text/org']
f.for_type_by_name('pandas.core.frame', 'DataFrame', pd_dataframe_to_org)
#+end_src

* Model Selection
** Load Data

#+begin_src jupyter-python
train = pd.read_csv('data/train.csv')
test = pd.read_csv('data/test.csv')

display_all(train.describe(include='all').T)
#+end_src

#+RESULTS:
#+begin_example
# Out[3]:
,#+BEGIN_EXAMPLE
  count         mean          std         min         25%  \
  MedInc      16512.0     3.880754     1.904294    0.499900    2.566700
  HouseAge    16512.0    28.608285    12.602499    1.000000   18.000000
  AveRooms    16512.0     5.435235     2.387375    0.888889    4.452055
  AveBedrms   16512.0     1.096685     0.433215    0.333333    1.006508
  Population  16512.0  1426.453004  1137.056380    3.000000  789.000000
  AveOccup    16512.0     3.096961    11.578744    0.692308    2.428799
  Latitude    16512.0    35.643149     2.136665   32.550000   33.930000
  Longitude   16512.0  -119.582290     2.005654 -124.350000 -121.810000
  AvePrice    16512.0     2.071947     1.156226    0.149990    1.198000
  
  50%          75%           max
  MedInc         3.545800     4.773175     15.000100
  HouseAge      29.000000    37.000000     52.000000
  AveRooms       5.235874     6.061037    141.909091
  AveBedrms      1.049286     1.100348     25.636364
  Population  1167.000000  1726.000000  35682.000000
  AveOccup       2.817240     3.280000   1243.333333
  Latitude      34.260000    37.720000     41.950000
  Longitude   -118.510000  -118.010000   -114.310000
  AvePrice       1.798500     2.651250      5.000010
,#+END_EXAMPLE
#+end_example


#+begin_src jupyter-python
X = train.drop('AvePrice', axis=1).to_numpy()
y = train['AvePrice'].to_numpy()
#+end_src

#+RESULTS:
: # Out[4]:

** Training

#+begin_src jupyter-python
rf = RandomForestRegressor()

param_grid = {
    'max_features': ['auto', 'sqrt', 'log2'],
    'max_depth' : [4,5,6,7,8],    
}

gs1 = GridSearchCV(estimator=rf, param_grid=param_grid, cv=3, n_jobs=6)
%time gs1.fit(X, y)
#+end_src

#+RESULTS:
: # Out[19]:
: : {'max_depth': 8, 'max_features': 'log2'}


#+begin_src jupyter-python
rf = RandomForestRegressor(**gs1.best_params_, warm_start=True, oob_score=True)

param_grid = {'n_estimators': [200, 400, 600, 800, 1000]}

gs2 = GridSearchCV(estimator=rf, param_grid=param_grid, cv=3, n_jobs=6)
gs2.fit(X, y)
gs2.best_params_
#+end_src

#+RESULTS:
: # Out[22]:
: : {'n_estimators': 800}


#+begin_src jupyter-python
gs2.score(X, y)
#gm.cv_results_
#+end_src

#+RESULTS:
: # Out[23]:
: : 0.8329383120470628

** Save best model

#+begin_src jupyter-python
with open('data/RF_california.pkl', 'wb') as file:
    pickle.dump(gs2.best_estimator_, file)
#+end_src

#+RESULTS:
: # Out[24]:

* Bibliography
** References
:PROPERTIES:
:BEAMER_opt: shrink=10
:END:

bibliographystyle:unsrt
bibliography:california.bib

* Local Variables                                                  :noexport:
# Local Variables:
# eval: (setenv "PATH" "/Library/TeX/texbin/:$PATH" t)
# org-ref-default-bibliography: ("./olist.bib")
# End:
